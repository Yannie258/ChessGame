#!/usr/bin/env node

/**
 * Module dependencies.
 */

const config = require("../config");
const app = require("../app");
const http = require("http");
const chat = require("../logic/webSockets/chat");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.defaultPort.toString());
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create WebSocket server.
 */
const chatWSServer = chat.createWSServer();

/**
 * WS router
 */
function onUpgrade(request, socket, head) {
  if (request.url === config.webSockets.chat) {
    chat.action(chatWSServer, request, socket, head);
  } else {
    socket.destroy();
  }
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
server.on("upgrade", onUpgrade);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind =
    typeof addr === "string" ? "pipe " + addr : "http://localhost:" + addr.port;
  console.log("Listening on " + bind);
}
